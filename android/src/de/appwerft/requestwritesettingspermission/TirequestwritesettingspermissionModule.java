/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.requestwritesettingspermission;

import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBaseActivity;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;


import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;


import android.Manifest;
import android.Manifest.permission;

import android.app.Activity;
import android.content.pm.PackageManager;
import android.os.Build;


@Kroll.module(name="Tirequestwritesettingspermission", id="de.appwerft.requestwritesettingspermission")
public class TirequestwritesettingspermissionModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "TirequestwritesettingspermissionModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public TirequestwritesettingspermissionModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

    // Methods
    @Kroll.method
    private boolean hasStoragePermission() {
        if (Build.VERSION.SDK_INT < 23) {
            return true;
        }
        Activity currentActivity = TiApplication.getInstance().getCurrentActivity();
        if (currentActivity.checkSelfPermission(Manifest.permission.WRITE_SETTINGS) == PackageManager.PERMISSION_GRANTED) {
            return true;
        }
        return false;
    }
    
    @Kroll.method
    public void requestSystemWritePermissions(@Kroll.argument(optional=true)KrollFunction permissionCallback) {
        if (hasStoragePermission()) {
            return;
        }
        // TODO  ??? // here stopps compiler with TiBaseActivity.writeSettingsContext cannot find symbol
        if (TiBaseActivity.writeSettingsCallbackContext == null) {
            TiBaseActivity.writeSettingsCallbackContext =  getKrollObject();
        }
        TiBaseActivity.writeSettingsPermissionCallback = permissionCallback;
        String[] permissions = null;
        permissions = new String[] {Manifest.permission.WRITE_SETTINGS};
        
        
        Activity currentActivity = TiApplication.getInstance().getCurrentActivity();
        // TODO  ????
        currentActivity.requestPermissions(permissions, TiC.PERMISSION_WRITE_SETTINGS);
        
    }

}

